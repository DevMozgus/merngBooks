{"ast":null,"code":"var _jsxFileName = \"/home/niko/Documents/web/openstack/bookExercise/frontend/src/components/Books.js\";\nimport React, { useState } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { ALL_BOOKS } from \"../queries\";\n\nconst Books = props => {\n  const [genres, setGenres] = useState([]);\n  const [filter, setFilter] = useState(\"all\");\n  const result = useQuery(ALL_BOOKS);\n\n  if (!props.show) {\n    return null;\n  }\n\n  if (result.loading) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 12\n      }\n    }, \"loading...\");\n  }\n\n  const books = result.data ? result.data.allBooks : [];\n  books.map(book => {\n    book.genres.map(genre => {\n      if (!genres.includes(genre)) setGenres(genres.concat(genre));\n    });\n  });\n\n  const newFilter = genre => {\n    setFilter(genre);\n    result.refetchQueries = [{\n      query: ALL_BOOKS\n    }];\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, \"books\"), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, \"in genre \", /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 23\n    }\n  }, filter)), /*#__PURE__*/React.createElement(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }, \"author\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }, \"published\")), books.map(book => {\n    /*#__PURE__*/\n    React.createElement(\"div\", {\n      key: book.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }\n    }, \"if(filter === \\\"all\\\" || book.genres.includes(filter)) return  (\", /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }\n    }, book.title), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }\n    }, book.author.name), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }\n    }, book.published)), \")\");\n  }))), genres.map(genre => /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => newFilter(genre),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, genre)), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => newFilter(\"all\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, \"all genres\"));\n};\n\nexport default Books;","map":{"version":3,"sources":["/home/niko/Documents/web/openstack/bookExercise/frontend/src/components/Books.js"],"names":["React","useState","useQuery","ALL_BOOKS","Books","props","genres","setGenres","filter","setFilter","result","show","loading","books","data","allBooks","map","book","genre","includes","concat","newFilter","refetchQueries","query","title","author","name","published"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { useQuery } from '@apollo/client';\nimport { ALL_BOOKS } from \"../queries\"\n\nconst Books = (props) => {\n  const [genres, setGenres] = useState([])\n  const [filter, setFilter] = useState(\"all\")\n  const result = useQuery(ALL_BOOKS)\n  if (!props.show) {\n    return null\n  }\n  if (result.loading)  {\n    return <div>loading...</div>\n  }\n\n  const books = result.data ? result.data.allBooks : []\n\n  books.map(book => {\n    book.genres.map(genre => {\n      if (!genres.includes(genre)) setGenres(genres.concat(genre))\n    })\n  })\n\n  const newFilter = (genre) => {\n    setFilter(genre)\n    result.refetchQueries = [ {query: ALL_BOOKS} ]\n  }\n\n  return (\n    <div>\n      <h2>books</h2>\n      <label>in genre <b>{filter}</b></label>\n      <table>\n        <tbody>\n          <tr>\n            <th></th>\n            <th>\n              author\n            </th>\n            <th>\n              published\n            </th>\n          </tr>\n          {books.map(book => {\n            <div key={book.title} >\n            if(filter === \"all\" || book.genres.includes(filter)) return  (\n                <tr>\n                <td>{book.title}</td>\n                <td>{book.author.name}</td>\n                <td>{book.published}</td>\n                </tr>\n            )\n            </div>}\n          )}\n        </tbody>\n      </table>\n      {\n        genres.map(genre => \n        <button onClick={() => newFilter(genre)} >{genre}</button>\n        )\n      }\n      <button onClick={() => newFilter(\"all\")} >all genres</button>\n    </div>\n  )\n}\n\nexport default Books"]},"metadata":{},"sourceType":"module"}