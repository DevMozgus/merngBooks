{"ast":null,"code":"var _jsxFileName = \"/home/niko/Documents/web/portfolio/merngBooks/frontend/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { setContext } from 'apollo-link-context';\nimport { ApolloClient, ApolloProvider, HttpLink, InMemoryCache, split, ApolloLink } from '@apollo/client';\nimport { getMainDefinition } from \"@apollo/client/utilities\";\nimport { WebSocketLink } from \"@apollo/client/link/ws\";\nconst authLink = setContext((_, {\n  headers\n}) => {\n  const token = localStorage.getItem(\"current-user-token\");\n  return {\n    headers: { ...headers,\n      authorization: token ? `bearer ${token}` : null\n    }\n  };\n});\nconst httpLink = new HttpLink({\n  uri: \"https://merngbooks.herokuapp.com\"\n});\nconst wsLink = new WebSocketLink({\n  uri: `wss://merngbooks.herokuapp.com/graphql`,\n  options: {\n    reconnect: true\n  }\n});\nconst splitLink = split(({\n  query\n}) => {\n  const definition = getMainDefinition(query);\n  return definition.kind === \"OperationDefinition\" && definition.operation === \"subscription\";\n}, wsLink, authLink.concat(httpLink));\nconst link = ApolloLink.from([splitLink]);\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link\n});\nReactDOM.render( /*#__PURE__*/React.createElement(ApolloProvider, {\n  client: client,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }\n})), document.getElementById('root'));","map":{"version":3,"sources":["/home/niko/Documents/web/portfolio/merngBooks/frontend/src/index.js"],"names":["React","ReactDOM","App","setContext","ApolloClient","ApolloProvider","HttpLink","InMemoryCache","split","ApolloLink","getMainDefinition","WebSocketLink","authLink","_","headers","token","localStorage","getItem","authorization","httpLink","uri","wsLink","options","reconnect","splitLink","query","definition","kind","operation","concat","link","from","client","cache","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,YAAT,EAAuBC,cAAvB,EAAuCC,QAAvC,EAAiDC,aAAjD,EAAgEC,KAAhE,EAAuEC,UAAvE,QAAyF,gBAAzF;AAEA,SAASC,iBAAT,QAAkC,0BAAlC;AACA,SAASC,aAAT,QAA8B,wBAA9B;AAEA,MAAMC,QAAQ,GAAGT,UAAU,CAAC,CAACU,CAAD,EAAI;AAAEC,EAAAA;AAAF,CAAJ,KAAoB;AAC9C,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,oBAArB,CAAd;AACA,SAAO;AACLH,IAAAA,OAAO,EAAE,EACP,GAAGA,OADI;AAEPI,MAAAA,aAAa,EAAEH,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB;AAFpC;AADJ,GAAP;AAMD,CAR0B,CAA3B;AAUA,MAAMI,QAAQ,GAAG,IAAIb,QAAJ,CAAa;AAAEc,EAAAA,GAAG,EAAE;AAAP,CAAb,CAAjB;AAEA,MAAMC,MAAM,GAAG,IAAIV,aAAJ,CAAkB;AAC/BS,EAAAA,GAAG,EAAG,wCADyB;AAE/BE,EAAAA,OAAO,EAAE;AACPC,IAAAA,SAAS,EAAE;AADJ;AAFsB,CAAlB,CAAf;AAOA,MAAMC,SAAS,GAAGhB,KAAK,CACrB,CAAC;AAAEiB,EAAAA;AAAF,CAAD,KAAe;AACb,QAAMC,UAAU,GAAGhB,iBAAiB,CAACe,KAAD,CAApC;AACA,SACEC,UAAU,CAACC,IAAX,KAAoB,qBAApB,IACAD,UAAU,CAACE,SAAX,KAAyB,cAF3B;AAID,CAPoB,EAQrBP,MARqB,EASrBT,QAAQ,CAACiB,MAAT,CAAgBV,QAAhB,CATqB,CAAvB;AAYA,MAAMW,IAAI,GAAGrB,UAAU,CAACsB,IAAX,CAAgB,CAACP,SAAD,CAAhB,CAAb;AAEA,MAAMQ,MAAM,GAAG,IAAI5B,YAAJ,CAAiB;AAC9B6B,EAAAA,KAAK,EAAE,IAAI1B,aAAJ,EADuB;AAE9BuB,EAAAA;AAF8B,CAAjB,CAAf;AAKA7B,QAAQ,CAACiC,MAAT,eACE,oBAAC,cAAD;AAAgB,EAAA,MAAM,EAAEF,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CADF,EAIEG,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { setContext } from 'apollo-link-context'\nimport { ApolloClient, ApolloProvider, HttpLink, InMemoryCache, split, ApolloLink } from '@apollo/client' \n\nimport { getMainDefinition } from \"@apollo/client/utilities\"\nimport { WebSocketLink } from \"@apollo/client/link/ws\"\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(\"current-user-token\")\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `bearer ${token}` : null\n    }\n  }\n})\n\nconst httpLink = new HttpLink({ uri: \"https://merngbooks.herokuapp.com\"})\n\nconst wsLink = new WebSocketLink({\n  uri: `wss://merngbooks.herokuapp.com/graphql`,\n  options: {\n    reconnect: true,\n  }\n})\n\nconst splitLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query)\n    return (\n      definition.kind === \"OperationDefinition\" &&\n      definition.operation === \"subscription\"\n    )\n  },\n  wsLink,\n  authLink.concat(httpLink)\n)\n\nconst link = ApolloLink.from([splitLink])\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>    \n    <App />\n  </ApolloProvider>,  \n  document.getElementById('root')\n)\n"]},"metadata":{},"sourceType":"module"}