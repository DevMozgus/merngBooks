{"ast":null,"code":"var _jsxFileName = \"/home/niko/Documents/web/portfolio/merngBooks/frontend/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { setContext } from 'apollo-link-context';\nimport { ApolloClient, ApolloProvider, HttpLink, InMemoryCache, split } from '@apollo/client';\nimport { getMainDefinition } from \"@apollo/client/utilities\";\nimport { WebSocketLink } from \"@apollo/client/link/ws\";\nconst authLink = setContext((_, {\n  headers\n}) => {\n  const token = localStorage.getItem(\"current-user-token\");\n  return {\n    headers: { ...headers,\n      authorization: token ? `bearer ${token}` : null\n    }\n  };\n});\nconst httpLink = new HttpLink({\n  uri: \"http://merngbooks.herokuapp.com\"\n});\n\nconst getHeaders = () => {\n  return headers;\n};\n\nconst wsLink = new WebSocketLink({\n  uri: `wss://merngbooks.herokuapp.com/graphql`,\n  options: {\n    reconnect: true,\n    connectionParams: () => {\n      return {\n        headers: getHeaders()\n      };\n    }\n  }\n});\nconst splitLink = split(({\n  query\n}) => {\n  const definition = getMainDefinition(query);\n  return definition.kind === \"OperationDefinition\" && definition.operation === \"subscription\";\n}, wsLink, authLink.concat(httpLink));\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: splitLink\n});\nReactDOM.render( /*#__PURE__*/React.createElement(ApolloProvider, {\n  client: client,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }\n})), document.getElementById('root'));","map":{"version":3,"sources":["/home/niko/Documents/web/portfolio/merngBooks/frontend/src/index.js"],"names":["React","ReactDOM","App","setContext","ApolloClient","ApolloProvider","HttpLink","InMemoryCache","split","getMainDefinition","WebSocketLink","authLink","_","headers","token","localStorage","getItem","authorization","httpLink","uri","getHeaders","wsLink","options","reconnect","connectionParams","splitLink","query","definition","kind","operation","concat","client","cache","link","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,YAAT,EAAuBC,cAAvB,EAAuCC,QAAvC,EAAiDC,aAAjD,EAAgEC,KAAhE,QAA6E,gBAA7E;AAEA,SAASC,iBAAT,QAAkC,0BAAlC;AACA,SAASC,aAAT,QAA8B,wBAA9B;AAEA,MAAMC,QAAQ,GAAGR,UAAU,CAAC,CAACS,CAAD,EAAI;AAAEC,EAAAA;AAAF,CAAJ,KAAoB;AAC9C,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,oBAArB,CAAd;AACA,SAAO;AACLH,IAAAA,OAAO,EAAE,EACP,GAAGA,OADI;AAEPI,MAAAA,aAAa,EAAEH,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB;AAFpC;AADJ,GAAP;AAMD,CAR0B,CAA3B;AAUA,MAAMI,QAAQ,GAAG,IAAIZ,QAAJ,CAAa;AAAEa,EAAAA,GAAG,EAAE;AAAP,CAAb,CAAjB;;AACA,MAAMC,UAAU,GAAG,MAAM;AACvB,SAAOP,OAAP;AACD,CAFD;;AAGA,MAAMQ,MAAM,GAAG,IAAIX,aAAJ,CAAkB;AAC/BS,EAAAA,GAAG,EAAG,wCADyB;AAE/BG,EAAAA,OAAO,EAAE;AACPC,IAAAA,SAAS,EAAE,IADJ;AAEPC,IAAAA,gBAAgB,EAAE,MAAM;AACtB,aAAO;AAAEX,QAAAA,OAAO,EAAEO,UAAU;AAArB,OAAP;AACH;AAJQ;AAFsB,CAAlB,CAAf;AAUA,MAAMK,SAAS,GAAGjB,KAAK,CACrB,CAAC;AAAEkB,EAAAA;AAAF,CAAD,KAAe;AACb,QAAMC,UAAU,GAAGlB,iBAAiB,CAACiB,KAAD,CAApC;AACA,SACEC,UAAU,CAACC,IAAX,KAAoB,qBAApB,IACAD,UAAU,CAACE,SAAX,KAAyB,cAF3B;AAID,CAPoB,EAQrBR,MARqB,EASrBV,QAAQ,CAACmB,MAAT,CAAgBZ,QAAhB,CATqB,CAAvB;AAYA,MAAMa,MAAM,GAAG,IAAI3B,YAAJ,CAAiB;AAC9B4B,EAAAA,KAAK,EAAE,IAAIzB,aAAJ,EADuB;AAE9B0B,EAAAA,IAAI,EAAER;AAFwB,CAAjB,CAAf;AAKAxB,QAAQ,CAACiC,MAAT,eACE,oBAAC,cAAD;AAAgB,EAAA,MAAM,EAAEH,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CADF,EAIEI,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { setContext } from 'apollo-link-context'\nimport { ApolloClient, ApolloProvider, HttpLink, InMemoryCache, split } from '@apollo/client' \n\nimport { getMainDefinition } from \"@apollo/client/utilities\"\nimport { WebSocketLink } from \"@apollo/client/link/ws\"\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(\"current-user-token\")\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `bearer ${token}` : null\n    }\n  }\n})\n\nconst httpLink = new HttpLink({ uri: \"http://merngbooks.herokuapp.com\"})\nconst getHeaders = () => {\n  return headers;\n};\nconst wsLink = new WebSocketLink({\n  uri: `wss://merngbooks.herokuapp.com/graphql`,\n  options: {\n    reconnect: true,\n    connectionParams: () => {\n      return { headers: getHeaders() };\n  },\n  }\n})\n\nconst splitLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query)\n    return (\n      definition.kind === \"OperationDefinition\" &&\n      definition.operation === \"subscription\"\n    )\n  },\n  wsLink,\n  authLink.concat(httpLink)\n)\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: splitLink\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>    \n    <App />\n  </ApolloProvider>,  \n  document.getElementById('root')\n)\n"]},"metadata":{},"sourceType":"module"}